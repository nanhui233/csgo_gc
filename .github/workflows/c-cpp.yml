name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    env:
      SCCACHE_GHA_ENABLED: "true"

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4

    - if: matrix.os != 'windows-latest'
      name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.9

    - if: matrix.os == 'ubuntu-latest'
      name: Dependencies
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt install --yes --no-install-recommends gcc-multilib g++-multilib
        
    # ugh, should clean this up
    - if: matrix.os == 'ubuntu-latest'
      name: Build Linux
      run: |
        mkdir ${{ github.workspace }}/release
        cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DOUTDIR=${{ github.workspace }}/release
        cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --target csgo csgo_gc
        cmake -B ${{ github.workspace }}/build_ds -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_ASM_FLAGS=-m32 -DOUTDIR=${{ github.workspace }}/release
        cmake --build ${{ github.workspace }}/build_ds --config ${{ matrix.build_type }} --target srcds csgo_gc

    - if: matrix.os == 'macos-latest'
      name: Build MacOS
      run: |
        mkdir ${{ github.workspace }}/release
        cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }} -DCMAKE_OSX_ARCHITECTURES=x86_64 -DFUNCHOOK_CPU=x86 -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DOUTDIR=${{ github.workspace }}/release
        cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --target csgo csgo_gc

    - if: matrix.os == 'windows-latest'
      name: Build Windows
      run: |
        mkdir ${{ github.workspace }}/release
        cmake -A Win32 -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }} -DOUTDIR=${{ github.workspace }}/release
        cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --target csgo srcds csgo_gc

    - name: Package
      shell: bash
      run: |
        cp $GITHUB_WORKSPACE/README.md $GITHUB_WORKSPACE/release/
        mkdir $GITHUB_WORKSPACE/release/licenses
        cp $GITHUB_WORKSPACE/LICENSE $GITHUB_WORKSPACE/release/licenses/LICENSE-csgo_gc.txt
        cp $GITHUB_WORKSPACE/build/_deps/cryptopp-cmake-build/cryptopp/License.txt $GITHUB_WORKSPACE/release/licenses/LICENSE-crypto++.txt
        cp $GITHUB_WORKSPACE/build/_deps/distorm-src/COPYING $GITHUB_WORKSPACE/release/licenses/LICENSE-distorm.txt
        cp $GITHUB_WORKSPACE/build/_deps/funchook-src/LICENSE $GITHUB_WORKSPACE/release/licenses/LICENSE-funchook.txt
        cp $GITHUB_WORKSPACE/build/_deps/protobuf-src/LICENSE $GITHUB_WORKSPACE/release/licenses/LICENSE-protobuf.txt
        cp $GITHUB_WORKSPACE/examples/config.txt $GITHUB_WORKSPACE/release/csgo_gc/
        cp $GITHUB_WORKSPACE/examples/inventory.txt $GITHUB_WORKSPACE/release/csgo_gc/
        cp $GITHUB_WORKSPACE/examples/price_sheet.txt $GITHUB_WORKSPACE/release/csgo_gc/
        cp $GITHUB_WORKSPACE/examples/unusual_loot_lists.txt $GITHUB_WORKSPACE/release/csgo_gc/

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: csgo_gc-${{ matrix.os }}
        path: ${{ github.workspace }}/release
